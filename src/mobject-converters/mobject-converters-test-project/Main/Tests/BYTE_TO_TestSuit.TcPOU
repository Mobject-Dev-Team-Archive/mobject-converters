<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="BYTE_TO_TestSuit" Id="{a4698bec-84ad-4b21-b823-26880c1ca9f7}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC BYTE_TO_TestSuit EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[Check_BYTE_TO_BOOL_Lower();
Check_BYTE_TO_BOOL_Upper();
Check_BYTE_TO_BYTE_Lower();
Check_BYTE_TO_BYTE_Upper();
Check_BYTE_TO_Date_Lower();
Check_BYTE_TO_Date_Upper();
Check_BYTE_TO_DINT_Upper();
Check_BYTE_TO_DINT_Lower();
Check_BYTE_TO_DT_Upper();
Check_BYTE_TO_DT_Lower();
Check_BYTE_TO_DWORD_Upper();
Check_BYTE_TO_DWORD_Lower();
Check_BYTE_TO_INT_Lower();
Check_BYTE_TO_INT_Upper();
Check_BYTE_TO_LINT_Lower();
Check_BYTE_TO_LINT_Upper();
Check_BYTE_TO_LREAL_Lower();
Check_BYTE_TO_LREAL_Upper();
Check_BYTE_TO_LWORD_Lower();
Check_BYTE_TO_LWORD_Upper();
Check_BYTE_TO_REAL_Lower();
Check_BYTE_TO_REAL_Upper();
Check_BYTE_TO_SINT_Lower();
Check_BYTE_TO_SINT_Upper();
Check_BYTE_TO_SINT_TooHigh();
Check_BYTE_TO_STRING_Lower();
Check_BYTE_TO_STRING_Upper();
Check_BYTE_TO_TIME_Lower();
Check_BYTE_TO_TIME_Upper();
Check_BYTE_TO_TOD_Lower();
Check_BYTE_TO_TOD_Upper();
Check_BYTE_TO_UDINT_Lower();
Check_BYTE_TO_UDINT_Upper();
Check_BYTE_TO_UINT_Lower();
Check_BYTE_TO_UINT_Upper();
Check_BYTE_TO_ULINT_Lower();
Check_BYTE_TO_ULINT_Upper();
Check_BYTE_TO_USINT_Lower();
Check_BYTE_TO_USINT_Upper();
Check_BYTE_TO_WORD_Lower();
Check_BYTE_TO_WORD_Upper();]]></ST>
    </Implementation>
    <Method Name="Check_BYTE_TO_BOOL_Lower" Id="{646b38af-1264-4a68-9d64-825a95c92624}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_BOOL_Lower
VAR
	value : BYTE := 0;
	actual : BOOL;
	converted : BOOL;
	equal : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_BOOL_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_BOOL(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_BOOL_Upper" Id="{bb7ff658-7871-41d4-8312-b8976f53b09c}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_BOOL_Upper
VAR
	value : BYTE := 255;
	actual : BOOL;
	converted : BOOL;
	equal : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_BOOL_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_BOOL(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_BYTE_Lower" Id="{f5ea0377-c90b-47e5-8732-9304efc2e395}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_BYTE_Lower
VAR
	value : BYTE := 0;
	actual : BYTE;
	converted : BOOL;
	equal : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_BYTE_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = value;

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_BYTE_Upper" Id="{eb2ca546-611d-4b5f-99bd-d4e6fb3f17d2}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_BYTE_Upper
VAR
	value : BYTE := 255;
	actual : BYTE;
	converted : BOOL;
	equal : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_BYTE_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = value;

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_Date_Lower" Id="{e5a10b6a-cba4-470e-872a-b7cae4a25a09}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_Date_Lower
VAR
	value : BYTE := 0;
	actual : DATE;
	converted : BOOL;
	equal : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_DATE_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_DATE(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_Date_Upper" Id="{9f72e83c-26b6-49de-a7c0-1a1e2f33687f}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_Date_Upper
VAR
	value : BYTE := 255;
	actual : DATE;
	converted : BOOL;
	equal : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_DATE_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_DATE(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_DINT_Lower" Id="{7bbae882-a47e-45f9-9f83-c6ae2c65d540}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_DINT_Lower
VAR
	value : BYTE := 0;
	actual : DINT;
	converted : BOOL;
	equal : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_DINT_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_DINT(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_DINT_Upper" Id="{f25dfdc7-18f5-48e1-9434-f2826bc07a03}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_DINT_Upper
VAR
	value : BYTE := 255;
	actual : DINT;
	converted : BOOL;
	equal : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_DINT_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_DINT(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_DT_Lower" Id="{1df6edaf-7eef-4d47-a4c2-1956e3428e83}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_DT_Lower
VAR
	value : BYTE := 0;
	actual : DT;
	converted : BOOL;
	equal : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_DT_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_DT(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_DT_Upper" Id="{d613e5d4-5503-42ca-860a-422e9f351ebb}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_DT_Upper
VAR
	value : BYTE := 255;
	actual : DT;
	converted : BOOL;
	equal : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_DT_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_DT(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_DWORD_Lower" Id="{f4aab472-dded-4601-979a-70700990c533}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_DWORD_Lower
VAR
	value : BYTE := 0;
	actual : DWORD;
	converted : BOOL;
	equal : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_DWORD_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_DWORD(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_DWORD_Upper" Id="{c49b1157-97ca-42b0-93a3-e292d452b16a}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_DWORD_Upper
VAR
	value : BYTE := 255;
	actual : DWORD;
	converted : BOOL;
	equal : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_DWORD_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_DWORD(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_INT_Lower" Id="{250e09fe-3aeb-496c-95e4-340657b897bf}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_INT_Lower
VAR
	value : BYTE := 0;
	actual : INT;
	converted : BOOL;
	equal : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_INT_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_INT(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_INT_Upper" Id="{10038e5e-396e-4b67-a5a1-cf04632b2d81}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_INT_Upper
VAR
	value : BYTE := 255;
	actual : INT;
	converted : BOOL;
	equal : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_INT_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_INT(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_LINT_Lower" Id="{47a528e5-e282-4dbe-94a0-571da32f1b52}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_LINT_Lower
VAR
	value : BYTE := 0;
	actual : LINT;
	converted : BOOL;
	equal : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_LINT_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_LINT(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_LINT_Upper" Id="{6d32ce5e-29f2-40c6-8268-7b238bfa5b8a}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_LINT_Upper
VAR
	value : BYTE := 255;
	actual : LINT;
	converted : BOOL;
	equal : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_LINT_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_LINT(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_LREAL_Lower" Id="{3610263b-c724-4f25-ad3c-030d69ad22ff}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_LREAL_Lower
VAR
	value : BYTE := 0;
	actual : LREAL;
	converted : BOOL;
	equal : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_LREAL_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_LREAL(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_LREAL_Upper" Id="{1082f238-cbc6-440d-8867-fb781ae874cf}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_LREAL_Upper
VAR
	value : BYTE := 255;
	actual : LREAL;
	converted : BOOL;
	equal : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_LREAL_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_LREAL(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_LWORD_Lower" Id="{9b798d36-e54d-4211-bf35-4413360d6a2b}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_LWORD_Lower
VAR
	value : BYTE := 0;
	actual : LWORD;
	converted : BOOL;
	equal : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_LWORD_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_LWORD(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_LWORD_Upper" Id="{e37e8667-b56f-4abb-a0a4-8073a1df126e}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_LWORD_Upper
VAR
	value : BYTE := 255;
	actual : LWORD;
	converted : BOOL;
	equal : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_LWORD_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_LWORD(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_REAL_Lower" Id="{30f992aa-9f4b-472c-be9e-950255a961d8}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_REAL_Lower
VAR
	value : BYTE := 0;
	actual : REAL;
	converted : BOOL;
	equal : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_REAL_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_REAL(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_REAL_Upper" Id="{8df74066-947a-4705-adf4-aa7123b3d788}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_REAL_Upper
VAR
	value : BYTE := 255;
	actual : REAL;
	converted : BOOL;
	equal : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_REAL_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_REAL(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_SINT_Lower" Id="{f2e2bc4f-15c7-4d27-aecb-59a4a7e40d57}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_SINT_Lower
VAR
	value : BYTE := 0;
	actual : SINT;
	converted : BOOL;
	equal : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_SINT_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_SINT(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_SINT_TooHigh" Id="{99953c72-aefc-408b-9e87-3a6b6ee85692}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_SINT_TooHigh
VAR
	value : BYTE := 255;
	actual : SINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_SINT_TooHigh');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);

// @TEST-ASSSERT
AssertFalse(Condition := converted, Message := 'Did not report conversion was prevented');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_SINT_Upper" Id="{fc1b9c2c-198c-4446-b7da-ed704e27ec50}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_SINT_Upper
VAR
	value : BYTE := 127;
	actual : SINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_SINT_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_SINT(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_STRING_Lower" Id="{60ec80fd-820c-4354-8c1f-67f20fd99c70}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_STRING_Lower
VAR
	value : BYTE := 0;
	actual : STRING;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_STRING_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_STRING(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_STRING_Upper" Id="{65e51acf-c47b-41dd-a3a4-3efd10e1027a}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_STRING_Upper
VAR
	value : BYTE := 255;
	actual : STRING;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_STRING_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_STRING(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_TIME_Lower" Id="{7e80ae20-d450-4ad9-bd27-8d034d9530fe}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_TIME_Lower
VAR
	value : BYTE := 0;
	actual : TIME;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_TIME_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_TIME(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_TIME_Upper" Id="{6a0208d0-91e2-417e-8f8a-e386060f151c}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_TIME_Upper
VAR
	value : BYTE := 255;
	actual : TIME;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_TIME_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_TIME(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_TOD_Lower" Id="{3fb1e2a2-f758-492d-a276-48a276f30393}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_TOD_Lower
VAR
	value : BYTE := 0;
	actual : TOD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_TOD_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_TOD(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_TOD_Upper" Id="{f713c92c-8932-4f30-b88e-95951232e91e}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_TOD_Upper
VAR
	value : BYTE := 255;
	actual : TOD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_TOD_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_TOD(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_UDINT_Lower" Id="{33708970-958a-451a-9d32-a5e01de68a76}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_UDINT_Lower
VAR
	value : BYTE := 0;
	actual : UDINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_UDINT_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_UDINT(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_UDINT_Upper" Id="{aca4c7f7-92d2-4027-8f26-a63541c5dbe5}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_UDINT_Upper
VAR
	value : BYTE := 255;
	actual : UDINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_UDINT_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_UDINT(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_UINT_Lower" Id="{4955dbc2-663f-4348-b699-8f0433a10b39}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_UINT_Lower
VAR
	value : BYTE := 0;
	actual : UINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_UINT_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_UINT(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_UINT_Upper" Id="{c6b50c9e-3075-45bc-83bf-c80483bb8374}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_UINT_Upper
VAR
	value : BYTE := 255;
	actual : UINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_UINT_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_UINT(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_ULINT_Lower" Id="{073aff00-ff09-4332-9601-59d109a9d459}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_ULINT_Lower
VAR
	value : BYTE := 0;
	actual : ULINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_ULINT_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_ULINT(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_ULINT_Upper" Id="{a839ab1e-b8f3-4754-b2ab-366ff5f00349}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_ULINT_Upper
VAR
	value : BYTE := 255;
	actual : ULINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_ULINT_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_ULINT(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_USINT_Lower" Id="{c172e097-ef70-4e9d-95f2-a93de5a52f1b}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_USINT_Lower
VAR
	value : BYTE := 0;
	actual : ULINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_USINT_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_USINT(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_USINT_Upper" Id="{7c26d34a-6a1e-45f0-a02c-8d999ffe70d2}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_USINT_Upper
VAR
	value : BYTE := 255;
	actual : ULINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_USINT_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_USINT(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_WORD_Lower" Id="{c5936c76-7388-4c2f-a05d-73cdb6b7fabe}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_WORD_Lower
VAR
	value : BYTE := 0;
	actual : WORD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_WORD_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_WORD(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_WORD_Upper" Id="{fa72fa5a-4119-4931-b856-1991b6fda29b}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_WORD_Upper
VAR
	value : BYTE := 255;
	actual : WORD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_WORD_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_WORD(value);

// @TEST-ASSSERT
AssertTrue(Condition := equal, Message := 'Did not return the correct value');
AssertTrue(Condition := converted, Message := 'Did not report conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>