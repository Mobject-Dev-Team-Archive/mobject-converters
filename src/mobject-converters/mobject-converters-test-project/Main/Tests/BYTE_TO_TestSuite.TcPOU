<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="BYTE_TO_TestSuite" Id="{c38927c0-9683-4451-b3bb-c40c98c84496}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC BYTE_TO_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[Check_BYTE_TO_BOOL_Upper();
Check_BYTE_TO_BOOL_Lower();
Check_BYTE_TO_BYTE_Upper();
Check_BYTE_TO_BYTE_Lower();
Check_BYTE_TO_WORD_Upper();
Check_BYTE_TO_WORD_Lower();
Check_BYTE_TO_DWORD_Upper();
Check_BYTE_TO_DWORD_Lower();
Check_BYTE_TO_LWORD_Upper();
Check_BYTE_TO_LWORD_Lower();
Check_BYTE_TO_SINT_Upper();
Check_BYTE_TO_SINT_Lower();
Check_BYTE_TO_SINT_TooHigh();
Check_BYTE_TO_INT_Upper();
Check_BYTE_TO_INT_Lower();
Check_BYTE_TO_DINT_Upper();
Check_BYTE_TO_DINT_Lower();
Check_BYTE_TO_LINT_Upper();
Check_BYTE_TO_LINT_Lower();
Check_BYTE_TO_USINT_Upper();
Check_BYTE_TO_USINT_Lower();
Check_BYTE_TO_UINT_Upper();
Check_BYTE_TO_UINT_Lower();
Check_BYTE_TO_UDINT_Upper();
Check_BYTE_TO_UDINT_Lower();
Check_BYTE_TO_ULINT_Upper();
Check_BYTE_TO_ULINT_Lower();
Check_BYTE_TO_REAL_Upper();
Check_BYTE_TO_REAL_Lower();
Check_BYTE_TO_LREAL_Upper();
Check_BYTE_TO_LREAL_Lower();
Check_BYTE_TO_TIME_Upper();
Check_BYTE_TO_TIME_Lower();
Check_BYTE_TO_TOD_Upper();
Check_BYTE_TO_TOD_Lower();
Check_BYTE_TO_DATE_Upper();
Check_BYTE_TO_DATE_Lower();
Check_BYTE_TO_DT_Upper();
Check_BYTE_TO_DT_Lower();
Check_BYTE_TO_STRING_Upper();
Check_BYTE_TO_STRING_Lower();]]></ST>
    </Implementation>
    <Method Name="Check_BYTE_TO_BOOL_Lower" Id="{ac87d2f6-db36-43f6-a7e2-3782b29cdbe9}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_BOOL_Lower
VAR
	value : BYTE := DatatypeLimits.BYTE_LOWER_LIMIT;
	actual : BOOL;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_BOOL_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_BOOL(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to BOOL correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to BOOL conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_BOOL_Upper" Id="{0b2bb98c-65c5-4fde-89f8-a39c52c26978}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_BOOL_Upper
VAR
	value : BYTE := DatatypeLimits.BYTE_UPPER_LIMIT;
	actual : BOOL;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_BOOL_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_BOOL(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to BOOL correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to BOOL conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_BYTE_Lower" Id="{f6660d92-b1e3-4bd7-859e-bdf26e62f002}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_BYTE_Lower
VAR
	value : BYTE := DatatypeLimits.BYTE_LOWER_LIMIT;
	actual : BYTE;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_BYTE_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = value;

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to BYTE correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to BYTE conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_BYTE_Upper" Id="{214aa7e3-4abb-4d75-9c99-83868509447e}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_BYTE_Upper
VAR
	value : BYTE := DatatypeLimits.BYTE_UPPER_LIMIT;
	actual : BYTE;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_BYTE_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = value;

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to BYTE correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to BYTE conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_DATE_Lower" Id="{320bf2d8-ca67-46f1-ba33-720bd20321f8}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_DATE_Lower
VAR
	value : BYTE := DatatypeLimits.BYTE_LOWER_LIMIT;
	actual : DATE;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_DATE_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_DATE(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to DATE correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to DATE conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_DATE_Upper" Id="{3cf17eab-74ac-46e2-a95f-2c07971ee139}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_DATE_Upper
VAR
	value : BYTE := DatatypeLimits.BYTE_UPPER_LIMIT;
	actual : DATE;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_DATE_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_DATE(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to DATE correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to DATE conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_DINT_Lower" Id="{e508eea2-52a0-40ff-9ef8-14ae11ecc757}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_DINT_Lower
VAR
	value : BYTE := DatatypeLimits.BYTE_LOWER_LIMIT;
	actual : DINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_DINT_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_DINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to DINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to DINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_DINT_Upper" Id="{bfe0cd31-916e-4fd6-947b-d5c0748704be}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_DINT_Upper
VAR
	value : BYTE := DatatypeLimits.BYTE_UPPER_LIMIT;
	actual : DINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_DINT_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_DINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to DINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to DINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_DT_Lower" Id="{81196007-2d5a-43ab-b4fc-58fdaa84fc8d}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_DT_Lower
VAR
	value : BYTE := DatatypeLimits.BYTE_LOWER_LIMIT;
	actual : DT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_DT_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_DT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to DT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to DT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_DT_Upper" Id="{a684ce64-9c59-42db-a531-1c0930e01ec0}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_DT_Upper
VAR
	value : BYTE := DatatypeLimits.BYTE_UPPER_LIMIT;
	actual : DT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_DT_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_DT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to DT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to DT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_DWORD_Lower" Id="{ceda0525-c609-4a2b-91c9-dfd57021404f}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_DWORD_Lower
VAR
	value : BYTE := DatatypeLimits.BYTE_LOWER_LIMIT;
	actual : DWORD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_DWORD_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_DWORD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to DWORD correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to DWORD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_DWORD_Upper" Id="{394ec300-8e92-4750-a92d-f5a449afe173}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_DWORD_Upper
VAR
	value : BYTE := DatatypeLimits.BYTE_UPPER_LIMIT;
	actual : DWORD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_DWORD_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_DWORD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to DWORD correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to DWORD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_INT_Lower" Id="{8080f2f9-d096-4f16-88b2-2f50c8ec5a75}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_INT_Lower
VAR
	value : BYTE := DatatypeLimits.BYTE_LOWER_LIMIT;
	actual : INT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_INT_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_INT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to INT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to INT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_INT_Upper" Id="{c6146aec-040c-41b1-99b7-e81a82ec74bb}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_INT_Upper
VAR
	value : BYTE := DatatypeLimits.BYTE_UPPER_LIMIT;
	actual : INT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_INT_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_INT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to INT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to INT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_LINT_Lower" Id="{d2a15a3c-8591-41c6-8f8a-712b75da87ca}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_LINT_Lower
VAR
	value : BYTE := DatatypeLimits.BYTE_LOWER_LIMIT;
	actual : LINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_LINT_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_LINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to LINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to LINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_LINT_Upper" Id="{715385c8-ee4f-4666-b813-06813d334745}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_LINT_Upper
VAR
	value : BYTE := DatatypeLimits.BYTE_UPPER_LIMIT;
	actual : LINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_LINT_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_LINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to LINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to LINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_LREAL_Lower" Id="{4a6da61f-ab07-4d60-b4f7-770e1b95f180}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_LREAL_Lower
VAR
	value : BYTE := DatatypeLimits.BYTE_LOWER_LIMIT;
	actual : LREAL;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_LREAL_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_LREAL(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to LREAL correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to LREAL conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_LREAL_Upper" Id="{13263a4d-bed1-4e61-a453-3e2a16e91009}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_LREAL_Upper
VAR
	value : BYTE := DatatypeLimits.BYTE_UPPER_LIMIT;
	actual : LREAL;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_LREAL_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_LREAL(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to LREAL correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to LREAL conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_LWORD_Lower" Id="{5e4906f1-9173-415e-8d6f-9de78ecf07e0}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_LWORD_Lower
VAR
	value : BYTE := DatatypeLimits.BYTE_LOWER_LIMIT;
	actual : LWORD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_LWORD_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_LWORD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to LWORD correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to LWORD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_LWORD_Upper" Id="{b8d892bc-5a1a-4f94-a867-37a708170076}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_LWORD_Upper
VAR
	value : BYTE := DatatypeLimits.BYTE_UPPER_LIMIT;
	actual : LWORD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_LWORD_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_LWORD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to LWORD correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to LWORD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_REAL_Lower" Id="{66d88623-6280-4b85-81db-00980d11a0d7}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_REAL_Lower
VAR
	value : BYTE := DatatypeLimits.BYTE_LOWER_LIMIT;
	actual : REAL;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_REAL_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_REAL(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to REAL correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to REAL conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_REAL_Upper" Id="{833c93a5-b68d-4efc-8c07-64ad0e2f0534}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_REAL_Upper
VAR
	value : BYTE := DatatypeLimits.BYTE_UPPER_LIMIT;
	actual : REAL;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_REAL_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_REAL(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to REAL correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to REAL conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_SINT_Lower" Id="{fc3c69e3-2268-4748-a95b-d54e6dac5486}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_SINT_Lower
VAR
	value : BYTE := DatatypeLimits.BYTE_LOWER_LIMIT;
	actual : SINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_SINT_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_SINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to SINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to SINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_SINT_TooHigh" Id="{4f82368a-ed93-4eda-a2df-8a1a25520103}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_SINT_TooHigh
VAR
	value : BYTE := DatatypeLimits.BYTE_UPPER_LIMIT;
	actual : SINT;
	converted : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_SINT_TooHigh');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);

// @TEST-ASSERT
AssertFalse(Condition := converted, Message := 'Did not report BYTE to SINT conversion was prevented');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_SINT_Upper" Id="{7662b3d2-9f21-4887-9d3f-1fba962bb068}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_SINT_Upper
VAR
	value : BYTE := DatatypeLimits.MAX_VALUE_OF_BYTE_WHICH_CAN_BE_HELD_IN_A_SINT;
	actual : SINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_SINT_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_SINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to SINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to SINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_STRING_Lower" Id="{3b139635-c449-4125-bcae-96bc5cb96dfa}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_STRING_Lower
VAR
	value : BYTE := DatatypeLimits.BYTE_LOWER_LIMIT;
	actual : STRING;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_STRING_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_STRING(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to STRING correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to STRING conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_STRING_Upper" Id="{1dfa0191-b3fa-40c4-b43e-69cf43fff885}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_STRING_Upper
VAR
	value : BYTE := DatatypeLimits.BYTE_UPPER_LIMIT;
	actual : STRING;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_STRING_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_STRING(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to STRING correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to STRING conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_TIME_Lower" Id="{cc87951f-0127-41f4-9ae6-8f9b79fe08d3}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_TIME_Lower
VAR
	value : BYTE := DatatypeLimits.BYTE_LOWER_LIMIT;
	actual : TIME;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_TIME_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_TIME(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to TIME correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to TIME conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_TIME_Upper" Id="{48ed6b00-2296-4db2-b5ae-ff0138cc5110}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_TIME_Upper
VAR
	value : BYTE := DatatypeLimits.BYTE_UPPER_LIMIT;
	actual : TIME;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_TIME_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_TIME(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to TIME correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to TIME conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_TOD_Lower" Id="{867e7ef4-4226-4fdd-bd7b-8f696c0a4ba9}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_TOD_Lower
VAR
	value : BYTE := DatatypeLimits.BYTE_LOWER_LIMIT;
	actual : TOD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_TOD_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_TOD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to TOD correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to TOD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_TOD_Upper" Id="{fefb83ce-cd15-4fba-804b-3fb377456bc0}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_TOD_Upper
VAR
	value : BYTE := DatatypeLimits.BYTE_UPPER_LIMIT;
	actual : TOD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_TOD_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_TOD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to TOD correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to TOD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_UDINT_Lower" Id="{105ca9eb-1da0-4753-9a84-b70159b2c3d5}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_UDINT_Lower
VAR
	value : BYTE := DatatypeLimits.BYTE_LOWER_LIMIT;
	actual : UDINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_UDINT_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_UDINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to UDINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to UDINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_UDINT_Upper" Id="{5bfa05f3-8c34-4808-b049-9a95bf4cb139}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_UDINT_Upper
VAR
	value : BYTE := DatatypeLimits.BYTE_UPPER_LIMIT;
	actual : UDINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_UDINT_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_UDINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to UDINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to UDINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_UINT_Lower" Id="{abec39c6-c70d-4eb7-a674-0c7ee202b0b4}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_UINT_Lower
VAR
	value : BYTE := DatatypeLimits.BYTE_LOWER_LIMIT;
	actual : UINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_UINT_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_UINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to UINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to UINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_UINT_Upper" Id="{9b863ea2-c33a-4fd3-a6fc-46f1a04d9c6a}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_UINT_Upper
VAR
	value : BYTE := DatatypeLimits.BYTE_UPPER_LIMIT;
	actual : UINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_UINT_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_UINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to UINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to UINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_ULINT_Lower" Id="{4459ea7e-e863-4bfe-a213-57bb397357e9}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_ULINT_Lower
VAR
	value : BYTE := DatatypeLimits.BYTE_LOWER_LIMIT;
	actual : ULINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_ULINT_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_ULINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to ULINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to ULINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_ULINT_Upper" Id="{4d269956-1a5a-4223-bd85-678fc11d7cca}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_ULINT_Upper
VAR
	value : BYTE := DatatypeLimits.BYTE_UPPER_LIMIT;
	actual : ULINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_ULINT_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_ULINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to ULINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to ULINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_USINT_Lower" Id="{466c0147-49db-4795-9fd6-3496b523087c}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_USINT_Lower
VAR
	value : BYTE := DatatypeLimits.BYTE_LOWER_LIMIT;
	actual : USINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_USINT_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_USINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to USINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to USINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_USINT_Upper" Id="{c56cfcd3-4ee2-4a1a-9412-695ab5be1610}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_USINT_Upper
VAR
	value : BYTE := DatatypeLimits.BYTE_UPPER_LIMIT;
	actual : USINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_USINT_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_USINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to USINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to USINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_WORD_Lower" Id="{9d24b7a5-2d36-4d60-8627-3e676ad233bc}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_WORD_Lower
VAR
	value : BYTE := DatatypeLimits.BYTE_LOWER_LIMIT;
	actual : WORD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_WORD_Lower');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_WORD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to WORD correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to WORD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_WORD_Upper" Id="{82b2f5e8-925d-423b-9dfb-e5c06b87b59e}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_WORD_Upper
VAR
	value : BYTE := DatatypeLimits.BYTE_UPPER_LIMIT;
	actual : WORD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_WORD_Upper');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_WORD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to WORD correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to WORD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>