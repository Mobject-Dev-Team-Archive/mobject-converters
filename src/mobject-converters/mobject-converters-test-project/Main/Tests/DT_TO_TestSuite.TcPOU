<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="DT_TO_TestSuite" Id="{bf7dd3c3-a216-4f6d-b55b-d7ed22da8d01}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC DT_TO_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[Check_DT_TO_BOOL_Upper();
Check_DT_TO_BOOL_Lower();
Check_DT_TO_BYTE_Upper();
Check_DT_TO_BYTE_Lower();
Check_DT_TO_BYTE_TooHigh();
Check_DT_TO_WORD_Upper();
Check_DT_TO_WORD_Lower();
Check_DT_TO_WORD_TooHigh();
Check_DT_TO_DWORD_Upper();
Check_DT_TO_DWORD_Lower();
Check_DT_TO_LWORD_Upper();
Check_DT_TO_LWORD_Lower();
Check_DT_TO_SINT_Upper();
Check_DT_TO_SINT_Lower();
Check_DT_TO_SINT_TooHigh();
Check_DT_TO_INT_Upper();
Check_DT_TO_INT_Lower();
Check_DT_TO_INT_TooHigh();
Check_DT_TO_DINT_Upper();
Check_DT_TO_DINT_Lower();
Check_DT_TO_DINT_TooHigh();
Check_DT_TO_LINT_Upper();
Check_DT_TO_LINT_Lower();
Check_DT_TO_USINT_Upper();
Check_DT_TO_USINT_Lower();
Check_DT_TO_USINT_TooHigh();
Check_DT_TO_UINT_Upper();
Check_DT_TO_UINT_Lower();
Check_DT_TO_UINT_TooHigh();
Check_DT_TO_UDINT_Upper();
Check_DT_TO_UDINT_Lower();
Check_DT_TO_ULINT_Upper();
Check_DT_TO_ULINT_Lower();
Check_DT_TO_REAL_Upper();
Check_DT_TO_REAL_Lower();
Check_DT_TO_LREAL_Upper();
Check_DT_TO_LREAL_Lower();
Check_DT_TO_TIME_Upper();
Check_DT_TO_TIME_Lower();
Check_DT_TO_TIME_TooHigh();
Check_DT_TO_TOD_Upper();
Check_DT_TO_TOD_Lower();
Check_DT_TO_TOD_TooHigh();
Check_DT_TO_DATE_Upper();
Check_DT_TO_DATE_Lower();
Check_DT_TO_DT_Upper();
Check_DT_TO_DT_Lower();
Check_DT_TO_STRING_Upper();
Check_DT_TO_STRING_Lower();]]></ST>
    </Implementation>
    <Method Name="Check_DT_TO_BOOL_Lower" Id="{5f8470c0-2c79-4f55-871d-26ad725fa846}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_BOOL_Lower
VAR
	value : DT := DatatypeLimits.DT_LOWER_LIMIT;
	actual : BOOL;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_BOOL_Lower');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_BOOL(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to BOOL correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to BOOL conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_BOOL_Upper" Id="{5bdea242-6595-4bca-98b6-2cddab1d1f72}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_BOOL_Upper
VAR
	value : DT := DatatypeLimits.DT_UPPER_LIMIT;
	actual : BOOL;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_BOOL_Upper');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_BOOL(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to BOOL correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to BOOL conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_BYTE_Lower" Id="{06fcbc49-f6d4-4351-9177-ff19f5f11ed6}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_BYTE_Lower
VAR
	value : DT := DatatypeLimits.DT_LOWER_LIMIT;
	actual : BYTE;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_BYTE_Lower');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_BYTE(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to BYTE correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to BYTE conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_BYTE_TooHigh" Id="{8129c381-b2b8-4631-920c-865d12d1b852}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_BYTE_TooHigh
VAR
	value : DT := DatatypeLimits.DT_UPPER_LIMIT;
	actual : BYTE;
	converted : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_BYTE_TooHigh');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);

// @TEST-ASSERT
AssertFalse(Condition := converted, Message := 'Did not report DT to BYTE conversion was prevented');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_BYTE_Upper" Id="{ac7a9973-cf3b-45e8-9747-1b349070cec5}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_BYTE_Upper
VAR
	value : DT := DatatypeLimits.MAX_VALUE_OF_DT_WHICH_CAN_BE_HELD_IN_A_BYTE;
	actual : BYTE;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_BYTE_Upper');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_BYTE(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to BYTE correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to BYTE conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_DATE_Lower" Id="{226886ae-190e-4c60-b37b-6c0f66452a68}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_DATE_Lower
VAR
	value : DT := DatatypeLimits.DT_LOWER_LIMIT;
	actual : DATE;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_DATE_Lower');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_DATE(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to DATE correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to DATE conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_DATE_Upper" Id="{eb6ae078-bf9a-4ccb-aee8-08df166073ab}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_DATE_Upper
VAR
	value : DT := DatatypeLimits.DT_UPPER_LIMIT;
	actual : DATE;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_DATE_Upper');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_DATE(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to DATE correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to DATE conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_DINT_Lower" Id="{ab7c729b-9a4e-4fd6-b290-050b0be427f2}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_DINT_Lower
VAR
	value : DT := DatatypeLimits.DT_LOWER_LIMIT;
	actual : DINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_DINT_Lower');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_DINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to DINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to DINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_DINT_TooHigh" Id="{b8295118-f387-4993-91fd-10707ff00abc}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_DINT_TooHigh
VAR
	value : DT := DatatypeLimits.DT_UPPER_LIMIT;
	actual : DINT;
	converted : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_DINT_TooHigh');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);

// @TEST-ASSERT
AssertFalse(Condition := converted, Message := 'Did not report DT to DINT conversion was prevented');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_DINT_Upper" Id="{cc58d98a-2e63-4d35-b6f9-3c107731d675}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_DINT_Upper
VAR
	value : DT := DatatypeLimits.MAX_VALUE_OF_DT_WHICH_CAN_BE_HELD_IN_A_DINT;
	actual : DINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_DINT_Upper');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_DINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to DINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to DINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_DT_Lower" Id="{4cabeb14-8f46-4346-b1e3-a6fd6e0e03c1}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_DT_Lower
VAR
	value : DT := DatatypeLimits.DT_LOWER_LIMIT;
	actual : DT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_DT_Lower');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = value;

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to DT correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to DT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_DT_Upper" Id="{459f9ccb-fc9a-4393-a1a6-4ef136fed25e}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_DT_Upper
VAR
	value : DT := DatatypeLimits.DT_UPPER_LIMIT;
	actual : DT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_DT_Upper');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = value;

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to DT correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to DT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_DWORD_Lower" Id="{78683698-3c33-47ec-a5c3-561e6327e867}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_DWORD_Lower
VAR
	value : DT := DatatypeLimits.DT_LOWER_LIMIT;
	actual : DWORD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_DWORD_Lower');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_DWORD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to DWORD correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to DWORD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_DWORD_Upper" Id="{c68b567a-ad66-4f9a-9f97-3663c6d100b5}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_DWORD_Upper
VAR
	value : DT := DatatypeLimits.DT_UPPER_LIMIT;
	actual : DWORD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_DWORD_Upper');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_DWORD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to DWORD correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to DWORD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_INT_Lower" Id="{2a6e1706-89f1-47b6-8394-9668593d0377}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_INT_Lower
VAR
	value : DT := DatatypeLimits.DT_LOWER_LIMIT;
	actual : INT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_INT_Lower');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_INT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to INT correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to INT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_INT_TooHigh" Id="{f44d661c-18a0-4dc2-8ccc-b318a72834b3}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_INT_TooHigh
VAR
	value : DT := DatatypeLimits.DT_UPPER_LIMIT;
	actual : INT;
	converted : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_INT_TooHigh');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);

// @TEST-ASSERT
AssertFalse(Condition := converted, Message := 'Did not report DT to INT conversion was prevented');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_INT_Upper" Id="{c834fcf7-66ac-4cfd-a41a-190257b7ee5a}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_INT_Upper
VAR
	value : DT := DatatypeLimits.MAX_VALUE_OF_DT_WHICH_CAN_BE_HELD_IN_A_INT;
	actual : INT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_INT_Upper');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_INT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to INT correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to INT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_LINT_Lower" Id="{d4bf5445-7888-41ee-8d11-c40f9565d6ca}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_LINT_Lower
VAR
	value : DT := DatatypeLimits.DT_LOWER_LIMIT;
	actual : LINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_LINT_Lower');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_LINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to LINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to LINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_LINT_Upper" Id="{0a2de31c-49c1-4f25-8008-68220e008e37}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_LINT_Upper
VAR
	value : DT := DatatypeLimits.DT_UPPER_LIMIT;
	actual : LINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_LINT_Upper');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_LINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to LINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to LINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_LREAL_Lower" Id="{680015b1-3277-4a3e-a294-cd7b2a2b0c66}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_LREAL_Lower
VAR
	value : DT := DatatypeLimits.DT_LOWER_LIMIT;
	actual : LREAL;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_LREAL_Lower');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_LREAL(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to LREAL correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to LREAL conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_LREAL_Upper" Id="{df0641a2-7bc9-4773-86df-6b979a18cf48}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_LREAL_Upper
VAR
	value : DT := DatatypeLimits.DT_UPPER_LIMIT;
	actual : LREAL;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_LREAL_Upper');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_LREAL(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to LREAL correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to LREAL conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_LWORD_Lower" Id="{0cef231d-dc62-4838-8856-88cae25dc627}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_LWORD_Lower
VAR
	value : DT := DatatypeLimits.DT_LOWER_LIMIT;
	actual : LWORD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_LWORD_Lower');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_LWORD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to LWORD correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to LWORD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_LWORD_Upper" Id="{1cf5e99c-93f7-477f-ac77-4ce1e2c6e5d2}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_LWORD_Upper
VAR
	value : DT := DatatypeLimits.DT_UPPER_LIMIT;
	actual : LWORD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_LWORD_Upper');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_LWORD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to LWORD correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to LWORD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_REAL_Lower" Id="{25000aa5-c5c3-439e-8b59-c18266b59912}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_REAL_Lower
VAR
	value : DT := DatatypeLimits.DT_LOWER_LIMIT;
	actual : REAL;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_REAL_Lower');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_REAL(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to REAL correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to REAL conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_REAL_Upper" Id="{700da25b-dcad-4d3a-b779-3ccca65029fc}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_REAL_Upper
VAR
	value : DT := DatatypeLimits.DT_UPPER_LIMIT;
	actual : REAL;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_REAL_Upper');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_REAL(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to REAL correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to REAL conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_SINT_Lower" Id="{f935d357-512e-4d01-88b5-509233c2f7b5}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_SINT_Lower
VAR
	value : DT := DatatypeLimits.DT_LOWER_LIMIT;
	actual : SINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_SINT_Lower');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_SINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to SINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to SINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_SINT_TooHigh" Id="{71b2eabc-c377-48ee-ae64-00a0460a77f0}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_SINT_TooHigh
VAR
	value : DT := DatatypeLimits.DT_UPPER_LIMIT;
	actual : SINT;
	converted : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_SINT_TooHigh');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);

// @TEST-ASSERT
AssertFalse(Condition := converted, Message := 'Did not report DT to SINT conversion was prevented');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_SINT_Upper" Id="{c5c531bf-44ac-4328-a661-a1ee73ce6345}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_SINT_Upper
VAR
	value : DT := DatatypeLimits.MAX_VALUE_OF_DT_WHICH_CAN_BE_HELD_IN_A_SINT;
	actual : SINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_SINT_Upper');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_SINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to SINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to SINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_STRING_Lower" Id="{1cea9b03-2996-472e-9ed2-49fb1b292a1f}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_STRING_Lower
VAR
	value : DT := DatatypeLimits.DT_LOWER_LIMIT;
	actual : STRING;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_STRING_Lower');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_STRING(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to STRING correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to STRING conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_STRING_Upper" Id="{dcba52b5-9d18-4e52-aa76-22ed4956e459}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_STRING_Upper
VAR
	value : DT := DatatypeLimits.DT_UPPER_LIMIT;
	actual : STRING;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_STRING_Upper');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_STRING(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to STRING correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to STRING conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_TIME_Lower" Id="{968517ae-e311-4153-8939-8ce6d96e86ce}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_TIME_Lower
VAR
	value : DT := DatatypeLimits.DT_LOWER_LIMIT;
	actual : TIME;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_TIME_Lower');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_TIME(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to TIME correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to TIME conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_TIME_TooHigh" Id="{452df00a-2f25-4e75-949c-69ed3bdb9119}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_TIME_TooHigh
VAR
	value : DT := DatatypeLimits.DT_UPPER_LIMIT;
	actual : TIME;
	converted : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_TIME_TooHigh');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);

// @TEST-ASSERT
AssertFalse(Condition := converted, Message := 'Did not report DT to TIME conversion was prevented');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_TIME_Upper" Id="{c4cc77ff-ecc1-4801-81ac-09ad9274883f}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_TIME_Upper
VAR
	value : DT := DatatypeLimits.MAX_VALUE_OF_DT_WHICH_CAN_BE_HELD_IN_A_TIME;
	actual : TIME;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_TIME_Upper');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_TIME(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to TIME correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to TIME conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_TOD_Lower" Id="{0e0f8924-353d-40b7-b3c4-6ba2f821078e}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_TOD_Lower
VAR
	value : DT := DatatypeLimits.DT_LOWER_LIMIT;
	actual : TOD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_TOD_Lower');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_TOD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to TOD correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to TOD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_TOD_TooHigh" Id="{b5876a20-dda6-42dc-9915-bce7eb88a552}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_TOD_TooHigh
VAR
	value : DT := DatatypeLimits.DT_UPPER_LIMIT;
	actual : TOD;
	converted : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_TOD_TooHigh');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);

// @TEST-ASSERT
AssertFalse(Condition := converted, Message := 'Did not report DT to TOD conversion was prevented');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_TOD_Upper" Id="{32befd99-5da8-4871-8b49-c492674e74a6}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_TOD_Upper
VAR
	value : DT := DatatypeLimits.MAX_VALUE_OF_DT_WHICH_CAN_BE_HELD_IN_A_TOD;
	actual : TOD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_TOD_Upper');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_TOD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to TOD correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to TOD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_UDINT_Lower" Id="{498e6f5f-7681-4cde-b4e6-3052f3ef81e8}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_UDINT_Lower
VAR
	value : DT := DatatypeLimits.DT_LOWER_LIMIT;
	actual : UDINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_UDINT_Lower');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_UDINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to UDINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to UDINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_UDINT_Upper" Id="{038d096a-032f-44a0-8248-2d5e027b4078}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_UDINT_Upper
VAR
	value : DT := DatatypeLimits.DT_UPPER_LIMIT;
	actual : UDINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_UDINT_Upper');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_UDINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to UDINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to UDINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_UINT_Lower" Id="{62368b26-fb85-44ca-94db-bc475b90cfc7}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_UINT_Lower
VAR
	value : DT := DatatypeLimits.DT_LOWER_LIMIT;
	actual : UINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_UINT_Lower');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_UINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to UINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to UINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_UINT_TooHigh" Id="{d4703453-babe-4c8d-be75-30b2ff2288bb}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_UINT_TooHigh
VAR
	value : DT := DatatypeLimits.DT_UPPER_LIMIT;
	actual : UINT;
	converted : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_UINT_TooHigh');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);

// @TEST-ASSERT
AssertFalse(Condition := converted, Message := 'Did not report DT to UINT conversion was prevented');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_UINT_Upper" Id="{992dd180-7cc0-4041-a806-debbf34af8c2}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_UINT_Upper
VAR
	value : DT := DatatypeLimits.MAX_VALUE_OF_DT_WHICH_CAN_BE_HELD_IN_A_UINT;
	actual : UINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_UINT_Upper');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_UINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to UINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to UINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_ULINT_Lower" Id="{0028fb3c-45cd-4ac5-ab3e-a64846cf8533}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_ULINT_Lower
VAR
	value : DT := DatatypeLimits.DT_LOWER_LIMIT;
	actual : ULINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_ULINT_Lower');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_ULINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to ULINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to ULINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_ULINT_Upper" Id="{dda6dd33-0447-4be6-8c02-56bbc7663940}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_ULINT_Upper
VAR
	value : DT := DatatypeLimits.DT_UPPER_LIMIT;
	actual : ULINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_ULINT_Upper');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_ULINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to ULINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to ULINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_USINT_Lower" Id="{c76b0680-8e1b-46e7-a655-0458e7d6c691}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_USINT_Lower
VAR
	value : DT := DatatypeLimits.DT_LOWER_LIMIT;
	actual : USINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_USINT_Lower');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_USINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to USINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to USINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_USINT_TooHigh" Id="{472ed588-62f6-43a1-be22-bd8af3d50995}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_USINT_TooHigh
VAR
	value : DT := DatatypeLimits.DT_UPPER_LIMIT;
	actual : USINT;
	converted : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_USINT_TooHigh');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);

// @TEST-ASSERT
AssertFalse(Condition := converted, Message := 'Did not report DT to USINT conversion was prevented');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_USINT_Upper" Id="{41c0374b-4a50-45cd-b698-6c4c92a767b8}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_USINT_Upper
VAR
	value : DT := DatatypeLimits.MAX_VALUE_OF_DT_WHICH_CAN_BE_HELD_IN_A_USINT;
	actual : USINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_USINT_Upper');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_USINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to USINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to USINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_WORD_Lower" Id="{a4f84542-6e1b-4f73-ac77-510efb6ab5fd}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_WORD_Lower
VAR
	value : DT := DatatypeLimits.DT_LOWER_LIMIT;
	actual : WORD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_WORD_Lower');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_WORD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to WORD correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to WORD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_WORD_TooHigh" Id="{16afbe70-12e7-4a74-9521-87e308d48206}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_WORD_TooHigh
VAR
	value : DT := DatatypeLimits.DT_UPPER_LIMIT;
	actual : WORD;
	converted : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_WORD_TooHigh');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);

// @TEST-ASSERT
AssertFalse(Condition := converted, Message := 'Did not report DT to WORD conversion was prevented');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_DT_TO_WORD_Upper" Id="{e44543d1-dc63-4b7d-b261-aeae98ac360d}">
      <Declaration><![CDATA[METHOD PUBLIC Check_DT_TO_WORD_Upper
VAR
	value : DT := DatatypeLimits.MAX_VALUE_OF_DT_WHICH_CAN_BE_HELD_IN_A_WORD;
	actual : WORD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_DT_TO_WORD_Upper');

// @TEST-RUN
converted := TryConvert_DT_TO_Destination(value, actual);
equal := actual = DT_TO_WORD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert DT to WORD correctly');
AssertTrue(Condition := converted, Message := 'Did not report DT to WORD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>