<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="USINT_TO_TestSuite" Id="{d0ea3481-05cd-4722-913e-880792bcf697}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC USINT_TO_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[Check_USINT_TO_BOOL_Max();
Check_USINT_TO_BOOL_Min();
Check_USINT_TO_BYTE_Max();
Check_USINT_TO_BYTE_Min();
Check_USINT_TO_WORD_Max();
Check_USINT_TO_WORD_Min();
Check_USINT_TO_DWORD_Max();
Check_USINT_TO_DWORD_Min();
Check_USINT_TO_LWORD_Max();
Check_USINT_TO_LWORD_Min();
Check_USINT_TO_SINT_Max();
Check_USINT_TO_SINT_Min();
Check_USINT_TO_SINT_TooHigh();
Check_USINT_TO_INT_Max();
Check_USINT_TO_INT_Min();
Check_USINT_TO_DINT_Max();
Check_USINT_TO_DINT_Min();
Check_USINT_TO_LINT_Max();
Check_USINT_TO_LINT_Min();
Check_USINT_TO_USINT_Max();
Check_USINT_TO_USINT_Min();
Check_USINT_TO_UINT_Max();
Check_USINT_TO_UINT_Min();
Check_USINT_TO_UDINT_Max();
Check_USINT_TO_UDINT_Min();
Check_USINT_TO_ULINT_Max();
Check_USINT_TO_ULINT_Min();
Check_USINT_TO_REAL_Max();
Check_USINT_TO_REAL_Min();
Check_USINT_TO_LREAL_Max();
Check_USINT_TO_LREAL_Min();
Check_USINT_TO_TIME_Max();
Check_USINT_TO_TIME_Min();
Check_USINT_TO_TOD_Max();
Check_USINT_TO_TOD_Min();
Check_USINT_TO_DATE_Max();
Check_USINT_TO_DATE_Min();
Check_USINT_TO_DT_Max();
Check_USINT_TO_DT_Min();
Check_USINT_TO_STRING_Max();
Check_USINT_TO_STRING_Min();]]></ST>
    </Implementation>
    <Method Name="Check_USINT_TO_BOOL_Min" Id="{bef09cde-7951-40e9-bbf2-dd37d04aa3b8}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_BOOL_Min
VAR
	value : USINT := DatatypeLimits.USINT_MIN_VALUE;
	actual : BOOL;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_BOOL_Min');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_BOOL(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to BOOL correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to BOOL conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_BOOL_Max" Id="{c3ccc7f0-791a-4317-bf72-15473e7be49f}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_BOOL_Max
VAR
	value : USINT := DatatypeLimits.USINT_MAX_VALUE;
	actual : BOOL;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_BOOL_Max');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_BOOL(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to BOOL correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to BOOL conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_BYTE_Min" Id="{39685313-8600-441c-944b-87c1a06e262d}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_BYTE_Min
VAR
	value : USINT := DatatypeLimits.USINT_MIN_VALUE;
	actual : BYTE;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_BYTE_Min');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_BYTE(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to BYTE correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to BYTE conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_BYTE_Max" Id="{b38fd4c4-cdb7-4910-8272-aa85f37a32ff}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_BYTE_Max
VAR
	value : USINT := DatatypeLimits.USINT_MAX_VALUE;
	actual : BYTE;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_BYTE_Max');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_BYTE(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to BYTE correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to BYTE conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_DATE_Min" Id="{684ea55d-af34-4412-b09b-0b6ae2ea600e}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_DATE_Min
VAR
	value : USINT := DatatypeLimits.USINT_MIN_VALUE;
	actual : DATE;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_DATE_Min');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_DATE(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to DATE correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to DATE conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_DATE_Max" Id="{4aa18867-d9e3-461e-a15e-5692d0cdb273}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_DATE_Max
VAR
	value : USINT := DatatypeLimits.USINT_MAX_VALUE;
	actual : DATE;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_DATE_Max');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_DATE(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to DATE correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to DATE conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_DINT_Min" Id="{93729c9e-0886-4750-9e12-61c5246758f4}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_DINT_Min
VAR
	value : USINT := DatatypeLimits.USINT_MIN_VALUE;
	actual : DINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_DINT_Min');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_DINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to DINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to DINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_DINT_Max" Id="{2845de9f-a56a-48ea-8e32-771d9aa241f2}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_DINT_Max
VAR
	value : USINT := DatatypeLimits.USINT_MAX_VALUE;
	actual : DINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_DINT_Max');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_DINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to DINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to DINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_DT_Min" Id="{f8209e93-e855-4240-98ca-4f76229b2191}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_DT_Min
VAR
	value : USINT := DatatypeLimits.USINT_MIN_VALUE;
	actual : DT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_DT_Min');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_DT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to DT correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to DT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_DT_Max" Id="{baf6fe13-4e05-49ef-b53f-597899751714}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_DT_Max
VAR
	value : USINT := DatatypeLimits.USINT_MAX_VALUE;
	actual : DT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_DT_Max');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_DT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to DT correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to DT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_DWORD_Min" Id="{3a4d90c2-10de-457c-8997-3a19704769e5}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_DWORD_Min
VAR
	value : USINT := DatatypeLimits.USINT_MIN_VALUE;
	actual : DWORD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_DWORD_Min');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_DWORD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to DWORD correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to DWORD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_DWORD_Max" Id="{bbe476a4-338f-42c2-993e-e3e3a3d380fd}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_DWORD_Max
VAR
	value : USINT := DatatypeLimits.USINT_MAX_VALUE;
	actual : DWORD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_DWORD_Max');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_DWORD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to DWORD correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to DWORD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_INT_Min" Id="{965cfc01-c235-48bf-8a63-fbb6ef4e0421}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_INT_Min
VAR
	value : USINT := DatatypeLimits.USINT_MIN_VALUE;
	actual : INT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_INT_Min');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_INT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to INT correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to INT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_INT_Max" Id="{f230233f-0098-447a-af1e-fdc8f277ca2f}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_INT_Max
VAR
	value : USINT := DatatypeLimits.USINT_MAX_VALUE;
	actual : INT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_INT_Max');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_INT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to INT correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to INT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_LINT_Min" Id="{44c5e24c-4d70-4847-85b8-3c96021f253b}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_LINT_Min
VAR
	value : USINT := DatatypeLimits.USINT_MIN_VALUE;
	actual : LINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_LINT_Min');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_LINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to LINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to LINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_LINT_Max" Id="{426c5606-7324-435f-beb7-fe7b2c6fd6ab}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_LINT_Max
VAR
	value : USINT := DatatypeLimits.USINT_MAX_VALUE;
	actual : LINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_LINT_Max');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_LINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to LINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to LINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_LREAL_Min" Id="{fcddb3c0-173f-45be-a5c3-05008c85c81f}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_LREAL_Min
VAR
	value : USINT := DatatypeLimits.USINT_MIN_VALUE;
	actual : LREAL;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_LREAL_Min');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_LREAL(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to LREAL correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to LREAL conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_LREAL_Max" Id="{2752de11-2993-41a7-88ae-ebe0aaec748e}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_LREAL_Max
VAR
	value : USINT := DatatypeLimits.USINT_MAX_VALUE;
	actual : LREAL;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_LREAL_Max');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_LREAL(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to LREAL correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to LREAL conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_LWORD_Min" Id="{c94cd4f3-9e7a-4db3-ac78-5387c2db0ed5}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_LWORD_Min
VAR
	value : USINT := DatatypeLimits.USINT_MIN_VALUE;
	actual : LWORD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_LWORD_Min');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_LWORD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to LWORD correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to LWORD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_LWORD_Max" Id="{a5a5ab54-89b4-43c3-9a49-0a10cac04a9b}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_LWORD_Max
VAR
	value : USINT := DatatypeLimits.USINT_MAX_VALUE;
	actual : LWORD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_LWORD_Max');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_LWORD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to LWORD correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to LWORD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_REAL_Min" Id="{24818aeb-3909-42f7-bff2-801f18aca3f2}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_REAL_Min
VAR
	value : USINT := DatatypeLimits.USINT_MIN_VALUE;
	actual : REAL;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_REAL_Min');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_REAL(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to REAL correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to REAL conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_REAL_Max" Id="{529b18ba-810a-4ffd-a952-2c9093a9c1af}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_REAL_Max
VAR
	value : USINT := DatatypeLimits.USINT_MAX_VALUE;
	actual : REAL;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_REAL_Max');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_REAL(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to REAL correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to REAL conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_SINT_Min" Id="{bfcdca0c-eeff-4ae5-9c4b-037aaf27a7d2}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_SINT_Min
VAR
	value : USINT := DatatypeLimits.USINT_MIN_VALUE;
	actual : SINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_SINT_Min');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_SINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to SINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to SINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_SINT_TooHigh" Id="{4ec387e4-1ee4-4a04-b973-e2b57e3bdf82}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_SINT_TooHigh
VAR
	value : USINT := DatatypeLimits.USINT_MAX_VALUE;
	actual : SINT;
	converted : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_SINT_TooHigh');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);

// @TEST-ASSERT
AssertFalse(Condition := converted, Message := 'Did not report USINT to SINT conversion was prevented');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_SINT_Max" Id="{3aadbce5-f0a2-44dd-bb8c-bba8bd42a420}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_SINT_Max
VAR
	value : USINT := DatatypeLimits.MAX_VALUE_OF_USINT_WHICH_CAN_BE_HELD_IN_A_SINT;
	actual : SINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_SINT_Max');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_SINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to SINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to SINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_STRING_Min" Id="{8907f311-b36f-4c88-9c72-a0052cffd008}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_STRING_Min
VAR
	value : USINT := DatatypeLimits.USINT_MIN_VALUE;
	actual : STRING;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_STRING_Min');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_STRING(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to STRING correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to STRING conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_STRING_Max" Id="{16d1889b-e64e-4b51-ba6f-86e323e2428d}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_STRING_Max
VAR
	value : USINT := DatatypeLimits.USINT_MAX_VALUE;
	actual : STRING;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_STRING_Max');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_STRING(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to STRING correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to STRING conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_TIME_Min" Id="{0da29536-f963-4163-9840-925eb0926f43}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_TIME_Min
VAR
	value : USINT := DatatypeLimits.USINT_MIN_VALUE;
	actual : TIME;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_TIME_Min');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_TIME(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to TIME correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to TIME conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_TIME_Max" Id="{37fbb90a-71df-462e-aa01-7c33bdeabcd1}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_TIME_Max
VAR
	value : USINT := DatatypeLimits.USINT_MAX_VALUE;
	actual : TIME;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_TIME_Max');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_TIME(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to TIME correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to TIME conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_TOD_Min" Id="{44541d85-b315-4323-b85a-bf80e89069b1}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_TOD_Min
VAR
	value : USINT := DatatypeLimits.USINT_MIN_VALUE;
	actual : TOD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_TOD_Min');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_TOD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to TOD correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to TOD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_TOD_Max" Id="{633bba59-f220-40b5-9eb8-ca5bd68a152b}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_TOD_Max
VAR
	value : USINT := DatatypeLimits.USINT_MAX_VALUE;
	actual : TOD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_TOD_Max');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_TOD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to TOD correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to TOD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_UDINT_Min" Id="{99558025-5444-4c2a-a978-658d29e28c31}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_UDINT_Min
VAR
	value : USINT := DatatypeLimits.USINT_MIN_VALUE;
	actual : UDINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_UDINT_Min');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_UDINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to UDINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to UDINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_UDINT_Max" Id="{47a0adbe-8f76-49d0-b9a9-a4ebd5f663e5}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_UDINT_Max
VAR
	value : USINT := DatatypeLimits.USINT_MAX_VALUE;
	actual : UDINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_UDINT_Max');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_UDINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to UDINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to UDINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_UINT_Min" Id="{33e35974-6056-404c-b12a-871b4f097fab}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_UINT_Min
VAR
	value : USINT := DatatypeLimits.USINT_MIN_VALUE;
	actual : UINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_UINT_Min');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_UINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to UINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to UINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_UINT_Max" Id="{75b9746e-5e1c-4c9c-b320-868967bf0d17}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_UINT_Max
VAR
	value : USINT := DatatypeLimits.USINT_MAX_VALUE;
	actual : UINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_UINT_Max');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_UINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to UINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to UINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_ULINT_Min" Id="{48b1b78e-a1c8-4117-833d-b727d80f2342}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_ULINT_Min
VAR
	value : USINT := DatatypeLimits.USINT_MIN_VALUE;
	actual : ULINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_ULINT_Min');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_ULINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to ULINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to ULINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_ULINT_Max" Id="{4b713caa-3a0a-45af-99e2-e8ae6b1dcc7b}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_ULINT_Max
VAR
	value : USINT := DatatypeLimits.USINT_MAX_VALUE;
	actual : ULINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_ULINT_Max');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_ULINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to ULINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to ULINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_USINT_Min" Id="{2cd6be44-5876-48cf-bc50-3849cf1070ff}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_USINT_Min
VAR
	value : USINT := DatatypeLimits.USINT_MIN_VALUE;
	actual : USINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_USINT_Min');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = value;

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to USINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to USINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_USINT_Max" Id="{23d00d00-023c-4d43-923b-ac011b641b60}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_USINT_Max
VAR
	value : USINT := DatatypeLimits.USINT_MAX_VALUE;
	actual : USINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_USINT_Max');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = value;

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to USINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to USINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_WORD_Min" Id="{5ba286fd-a3b5-4bea-a089-2279f5c3b0fb}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_WORD_Min
VAR
	value : USINT := DatatypeLimits.USINT_MIN_VALUE;
	actual : WORD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_WORD_Min');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_WORD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to WORD correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to WORD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_USINT_TO_WORD_Max" Id="{f806d0be-8a9b-4929-ab16-08a62c171ddf}">
      <Declaration><![CDATA[METHOD PUBLIC Check_USINT_TO_WORD_Max
VAR
	value : USINT := DatatypeLimits.USINT_MAX_VALUE;
	actual : WORD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_USINT_TO_WORD_Max');

// @TEST-RUN
converted := TryConvert_USINT_TO_Destination(value, actual);
equal := actual = USINT_TO_WORD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert USINT to WORD correctly');
AssertTrue(Condition := converted, Message := 'Did not report USINT to WORD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>